#include "fdf.h"

void	display_squares(t_img *img, t_map map)
{
	t_point		pt;

	pt.y = 0;
	while (map.data[pt.y])
	{
		pt.x = 0;
		while (map.data[pt.y][pt.x])
		{
			if (map.data[pt.y][pt.x] >= 48)
				print_cases(img, pt, img->size_line);
			pt.x++;
		}
		pt.y++;
	}
}

void	print_cases(t_img *img, t_point pt, int size_line)
{
	int		pos;
	t_point		offset;

	offset.x = img->coef_x / 2;
	while (offset.x <= ((3 / 2 ) * img->coef_x) + 1)
	{
		offset.y = img->coef_y / 2;
		while (offset.y < ((3 / 2 ) * img->coef_y))
		{
			pos = ((pt.x * img->coef_x) + offset.x) * 4 +
					size_line * ((pt.y * img->coef_y) + offset.y);
			img->data[pos] = 100;
			img->data[pos + 1] = 50;
			img->data[pos + 2] = 90;
			offset.y++;
		}
		offset.x += img->coef_x;
	}
	offset.y = img->coef_y / 2;
	while (offset.y <= ((3 / 2 ) * img->coef_y) + 1)
	{
		offset.x = img->coef_x / 2;
		while (offset.x < ((3 / 2 ) * img->coef_x))
		{
			pos = ((pt.x * img->coef_x) + offset.x) * 4 +
					size_line * ((pt.y * img->coef_y) + offset.y);
			img->data[pos] = 100;
			img->data[pos + 1] = 50;
			img->data[pos + 2] = 90;
			offset.x++;
		}
		offset.y += img->coef_y;
	}
}

/*void	print_rectangles(t_img *img, t_map map)
{
	t_point		pt;

	pt.y = 0;
	while (map.data[pt.y])
	{
		pt.x = 0;
		while (map.data[pt.y][pt.x])
			print_one_rect(img, pt, img->size_line);
			pt.x++;
		pt.y++;
	}
}

void	print_one_rect(t_img *img, t_point pt, int size_line)
{
	int	pos;
*/	
